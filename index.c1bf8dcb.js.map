{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/game/Game.js","src/game/Grid.js","src/game/Cell.js","src/game/Tile.js"],"sourcesContent":["class $7cd56f46768996e5$export$f6f0c3fe4ec306ea {\n    #cellElement;\n    #x;\n    #y;\n    #tile;\n    #mergeTile;\n    constructor(cellElement, x, y){\n        this.#cellElement = cellElement;\n        this.#x = x;\n        this.#y = y;\n    }\n    get x() {\n        return this.#x;\n    }\n    get y() {\n        return this.#y;\n    }\n    get tile() {\n        return this.#tile;\n    }\n    set tile(value) {\n        this.#tile = value;\n        if (value == null) return;\n        this.#tile.x = this.#x;\n        this.#tile.y = this.#y;\n    }\n    get mergeTile() {\n        return this.#mergeTile;\n    }\n    set mergeTile(value) {\n        this.#mergeTile = value;\n        if (value == null) return;\n        this.#mergeTile.x = this.#x;\n        this.#mergeTile.y = this.#y;\n    }\n    canAccept(tile) {\n        return this.tile == null || this.mergeTile == null && this.tile.value === tile.value;\n    }\n    mergeTiles() {\n        if (this.tile == null || this.mergeTile == null) return;\n        this.tile.value = this.tile.value + this.mergeTile.value;\n        this.mergeTile.remove();\n        this.mergeTile = null;\n        return this.tile.value;\n    }\n}\n\n\n\nclass $5bd8f317a28a951e$export$235cb65c20ad2b7 {\n    #tileElement;\n    #x;\n    #y;\n    #value;\n    constructor(tileContainer, value = Math.random() > 0.1 ? 2 : 4){\n        this.#tileElement = document.createElement(\"div\");\n        this.#tileElement.classList.add(\"game__tile\");\n        tileContainer.append(this.#tileElement);\n        this.value = value;\n    }\n    get value() {\n        return this.#value;\n    }\n    set value(v) {\n        this.#value = v;\n        this.#tileElement.textContent = v;\n        this.#tileElement.className = `game__tile game__tile--${v}`;\n    }\n    get x() {\n        return this.#x;\n    }\n    set x(value) {\n        this.#x = value;\n        this.#tileElement.style.setProperty(\"--x\", value);\n    }\n    get y() {\n        return this.#y;\n    }\n    set y(value) {\n        this.#y = value;\n        this.#tileElement.style.setProperty(\"--y\", value);\n    }\n    remove() {\n        this.#tileElement.remove();\n    }\n    waitForTransition(animation = false) {\n        return new Promise((resolve)=>{\n            this.#tileElement.addEventListener(animation ? \"animationend\" : \"transitionend\", resolve, {\n                once: true\n            });\n        });\n    }\n}\n\n\nclass $7810df3db0975edd$export$ef2184bd89960b14 {\n    #cells;\n    #gridElement;\n    constructor(gridElement, initialGridState = null){\n        this.#gridElement = gridElement;\n        gridElement.style.setProperty(\"--grid-size\", (0, $852414dda2b7b132$export$bc90872e265d166e));\n        this.#cells = this.#createCellElements(gridElement).map((cellElement, index)=>{\n            return new (0, $7cd56f46768996e5$export$f6f0c3fe4ec306ea)(cellElement, index % (0, $852414dda2b7b132$export$bc90872e265d166e), Math.floor(index / (0, $852414dda2b7b132$export$bc90872e265d166e)));\n        });\n        if (initialGridState) this.#populateInitialState(initialGridState);\n    }\n    get gridElement() {\n        return this.#gridElement;\n    }\n    get cells() {\n        return this.#cells;\n    }\n    get cellsByRow() {\n        return this.#cells.reduce((cellGrid, cell)=>{\n            cellGrid[cell.y] = cellGrid[cell.y] || [];\n            cellGrid[cell.y][cell.x] = cell;\n            return cellGrid;\n        }, []);\n    }\n    get cellsByColumn() {\n        return this.#cells.reduce((cellGrid, cell)=>{\n            cellGrid[cell.x] = cellGrid[cell.x] || [];\n            cellGrid[cell.x][cell.y] = cell;\n            return cellGrid;\n        }, []);\n    }\n    get #emptyCells() {\n        return this.#cells.filter((cell)=>cell.tile == null);\n    }\n    randomEmptyCell() {\n        const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\n        return this.#emptyCells[randomIndex];\n    }\n    spawnTile() {\n        const cell = this.randomEmptyCell();\n        if (!cell) return;\n        const tile = new (0, $5bd8f317a28a951e$export$235cb65c20ad2b7)(this.gridElement);\n        cell.tile = tile;\n        return tile;\n    }\n    clear() {\n        this.#cells.forEach((cell)=>{\n            if (cell.tile) {\n                cell.tile.remove();\n                cell.tile = null;\n            }\n            if (cell.mergeTile) {\n                cell.mergeTile.remove();\n                cell.mergeTile = null;\n            }\n        });\n    }\n    #createCellElements(gridElement) {\n        const cells = [];\n        for(let i = 0; i < (0, $852414dda2b7b132$export$bc90872e265d166e) * (0, $852414dda2b7b132$export$bc90872e265d166e); i++){\n            const cell = document.createElement(\"div\");\n            cell.classList.add(\"game__cell\");\n            cells.push(cell);\n            gridElement.append(cell);\n        }\n        return cells;\n    }\n    #populateInitialState(initialState) {\n        for(let y = 0; y < initialState.length; y++)for(let x = 0; x < initialState[y].length; x++){\n            const value = initialState[y][x];\n            if (value) {\n                const cell = this.#cells.find((c)=>c.x === x && c.y === y);\n                const tile = new (0, $5bd8f317a28a951e$export$235cb65c20ad2b7)(this.#gridElement, value);\n                cell.tile = tile;\n            }\n        }\n    }\n}\n\n\nconst $852414dda2b7b132$export$bc90872e265d166e = 4;\nclass $852414dda2b7b132$export$985739bfa5723e08 {\n    #grid;\n    #status;\n    #score;\n    static GAME_STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    static DIRECTIONS = {\n        UP: \"up\",\n        DOWN: \"down\",\n        LEFT: \"left\",\n        RIGHT: \"right\"\n    };\n    constructor(gridElement, initialGridState = null){\n        this.#grid = new (0, $7810df3db0975edd$export$ef2184bd89960b14)(gridElement, initialGridState);\n        this.#status = $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.idle;\n        this.#score = 0;\n    }\n    get grid() {\n        return this.#grid;\n    }\n    get score() {\n        return this.#score;\n    }\n    get status() {\n        return this.#status;\n    }\n    get isGameOver() {\n        return this.#status === $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.lose;\n    }\n    get isWin() {\n        return this.#status === $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.win;\n    }\n    start() {\n        this.#status = $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.playing;\n        this.spawnTiles(2);\n    }\n    restart() {\n        this.#grid.clear();\n        this.#status = $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.idle;\n        this.#score = 0;\n    }\n    async tryMove(direction) {\n        if (this.#status !== $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.playing) return;\n        const { UP: UP, DOWN: DOWN, LEFT: LEFT, RIGHT: RIGHT } = $852414dda2b7b132$export$985739bfa5723e08.DIRECTIONS;\n        const moveMap = {\n            [UP]: [\n                this.canMoveUp,\n                this.moveUp\n            ],\n            [DOWN]: [\n                this.canMoveDown,\n                this.moveDown\n            ],\n            [LEFT]: [\n                this.canMoveLeft,\n                this.moveLeft\n            ],\n            [RIGHT]: [\n                this.canMoveRight,\n                this.moveRight\n            ]\n        };\n        const [canMove, move] = moveMap[direction] || [];\n        if (!canMove?.call(this)) return false;\n        await move.call(this);\n        this.mergeTiles();\n        const [newTile] = this.spawnTiles(1);\n        if (!this.canMoveUp() && !this.canMoveDown() && !this.canMoveLeft() && !this.canMoveRight()) {\n            this.#status = $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.lose;\n            if (newTile) await newTile.waitForTransition(true);\n        }\n        return true;\n    }\n    canMoveUp() {\n        return this.#canMove(this.#grid.cellsByColumn);\n    }\n    canMoveDown() {\n        return this.#canMove(this.#grid.cellsByColumn.map((column)=>[\n                ...column\n            ].reverse()));\n    }\n    canMoveLeft() {\n        return this.#canMove(this.#grid.cellsByRow);\n    }\n    canMoveRight() {\n        return this.#canMove(this.#grid.cellsByRow.map((row)=>[\n                ...row\n            ].reverse()));\n    }\n    moveUp() {\n        return this.#slideTiles(this.#grid.cellsByColumn);\n    }\n    moveDown() {\n        return this.#slideTiles(this.#grid.cellsByColumn.map((column)=>[\n                ...column\n            ].reverse()));\n    }\n    moveLeft() {\n        return this.#slideTiles(this.#grid.cellsByRow);\n    }\n    moveRight() {\n        return this.#slideTiles(this.#grid.cellsByRow.map((row)=>[\n                ...row\n            ].reverse()));\n    }\n    #canMove(cells) {\n        return cells.some((group)=>{\n            return group.some((cell, index)=>{\n                if (index === 0) return false;\n                if (cell.tile == null) return false;\n                const moveToCell = group[index - 1];\n                return moveToCell.canAccept(cell.tile);\n            });\n        });\n    }\n    #slideTiles(cells) {\n        return Promise.all(cells.flatMap((group)=>{\n            const promises = [];\n            for(let i = 1; i < group.length; i++){\n                const cell = group[i];\n                if (cell.tile == null) continue;\n                let lastValidCell;\n                for(let j = i - 1; j >= 0; j--){\n                    const moveToCell = group[j];\n                    if (!moveToCell.canAccept(cell.tile)) break;\n                    lastValidCell = moveToCell;\n                }\n                if (lastValidCell != null) {\n                    promises.push(cell.tile.waitForTransition());\n                    if (lastValidCell.tile != null) lastValidCell.mergeTile = cell.tile;\n                    else lastValidCell.tile = cell.tile;\n                    cell.tile = null;\n                }\n            }\n            return promises;\n        }));\n    }\n    mergeTiles() {\n        let scoreGained = 0;\n        this.#grid.cells.forEach((cell)=>{\n            const mergedValue = cell.mergeTiles();\n            if (mergedValue) {\n                scoreGained += mergedValue;\n                if (mergedValue === 2048) this.#status = $852414dda2b7b132$export$985739bfa5723e08.GAME_STATUS.win;\n            }\n        });\n        this.#score += scoreGained;\n    }\n    spawnTiles(count = 1) {\n        const tiles = [];\n        for(let i = 0; i < count; i++){\n            const spawnedTile = this.#grid.spawnTile();\n            tiles.push(spawnedTile);\n        }\n        return tiles;\n    }\n}\n\n\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game__field\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game__score\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message--lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message--win\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message--start\");\nconst $09e991522ca7e64e$var$game = new (0, $852414dda2b7b132$export$985739bfa5723e08)($09e991522ca7e64e$var$gameField);\nconst { DIRECTIONS: $09e991522ca7e64e$var$DIRECTIONS } = (0, $852414dda2b7b132$export$985739bfa5723e08);\nlet $09e991522ca7e64e$var$touchStartX = null;\nlet $09e991522ca7e64e$var$touchStartY = null;\nconst $09e991522ca7e64e$var$SWIPE_THRESHOLD = 30;\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$handleButtonClick);\nfunction $09e991522ca7e64e$var$handleButtonClick() {\n    if ($09e991522ca7e64e$var$game.status === (0, $852414dda2b7b132$export$985739bfa5723e08).GAME_STATUS.idle) $09e991522ca7e64e$var$startGame();\n    else $09e991522ca7e64e$var$restartGame();\n}\nfunction $09e991522ca7e64e$var$handleTouchStart(e) {\n    e.preventDefault();\n    const touch = e.changedTouches[0];\n    $09e991522ca7e64e$var$touchStartX = touch.clientX;\n    $09e991522ca7e64e$var$touchStartY = touch.clientY;\n}\nasync function $09e991522ca7e64e$var$handleTouchEnd(e) {\n    e.preventDefault();\n    const touch = e.changedTouches[0];\n    const dx = touch.clientX - $09e991522ca7e64e$var$touchStartX;\n    const dy = touch.clientY - $09e991522ca7e64e$var$touchStartY;\n    if (Math.abs(dx) < $09e991522ca7e64e$var$SWIPE_THRESHOLD && Math.abs(dy) < $09e991522ca7e64e$var$SWIPE_THRESHOLD) return;\n    let direction;\n    if (Math.abs(dx) > Math.abs(dy)) direction = dx > 0 ? $09e991522ca7e64e$var$DIRECTIONS.RIGHT : $09e991522ca7e64e$var$DIRECTIONS.LEFT;\n    else direction = dy > 0 ? $09e991522ca7e64e$var$DIRECTIONS.DOWN : $09e991522ca7e64e$var$DIRECTIONS.UP;\n    await $09e991522ca7e64e$var$processMove(direction);\n}\nasync function $09e991522ca7e64e$var$processMove(direction) {\n    const moved = await $09e991522ca7e64e$var$game.tryMove(direction);\n    if (moved) {\n        $09e991522ca7e64e$var$updateScore();\n        if ($09e991522ca7e64e$var$game.isWin) {\n            $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$removeTouchListeners();\n            return;\n        }\n        if ($09e991522ca7e64e$var$game.isGameOver) {\n            $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n            $09e991522ca7e64e$var$removeTouchListeners();\n            return;\n        }\n    }\n    $09e991522ca7e64e$var$setupInput();\n}\nasync function $09e991522ca7e64e$var$handleKeyDown(e) {\n    const direction = {\n        ArrowUp: $09e991522ca7e64e$var$DIRECTIONS.UP,\n        ArrowDown: $09e991522ca7e64e$var$DIRECTIONS.DOWN,\n        ArrowLeft: $09e991522ca7e64e$var$DIRECTIONS.LEFT,\n        ArrowRight: $09e991522ca7e64e$var$DIRECTIONS.RIGHT\n    }[e.key];\n    if (!direction) {\n        $09e991522ca7e64e$var$setupInput();\n        return;\n    }\n    await $09e991522ca7e64e$var$processMove(direction);\n}\nfunction $09e991522ca7e64e$var$setupInput() {\n    window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyDown, {\n        once: true\n    });\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.score;\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$button.classList.remove(\"button--start\");\n    $09e991522ca7e64e$var$button.classList.add(\"button--restart\");\n    $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$setupInput();\n    $09e991522ca7e64e$var$gameField.addEventListener(\"touchstart\", $09e991522ca7e64e$var$handleTouchStart);\n    $09e991522ca7e64e$var$gameField.addEventListener(\"touchend\", $09e991522ca7e64e$var$handleTouchEnd);\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$button.classList.remove(\"button--restart\");\n    $09e991522ca7e64e$var$button.classList.add(\"button--start\");\n    $09e991522ca7e64e$var$button.textContent = \"Start\";\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$removeTouchListeners();\n}\nfunction $09e991522ca7e64e$var$removeTouchListeners() {\n    $09e991522ca7e64e$var$gameField.removeEventListener(\"touchstart\", $09e991522ca7e64e$var$handleTouchStart);\n    $09e991522ca7e64e$var$gameField.removeEventListener(\"touchend\", $09e991522ca7e64e$var$handleTouchEnd);\n}\n\n\n//# sourceMappingURL=index.c1bf8dcb.js.map\n","import { Game } from '../game/Game.js';\n\nconst gameField = document.querySelector('.game__field');\nconst button = document.querySelector('.button');\nconst gameScore = document.querySelector('.game__score');\nconst loseMessage = document.querySelector('.message--lose');\nconst winMessage = document.querySelector('.message--win');\nconst startMessage = document.querySelector('.message--start');\n\nconst game = new Game(gameField);\nconst { DIRECTIONS } = Game;\n\nlet touchStartX = null;\nlet touchStartY = null;\nconst SWIPE_THRESHOLD = 30;\n\nbutton.addEventListener('click', handleButtonClick);\n\nfunction handleButtonClick() {\n  if (game.status === Game.GAME_STATUS.idle) {\n    startGame();\n  } else {\n    restartGame();\n  }\n}\n\nfunction handleTouchStart(e) {\n  e.preventDefault();\n\n  const touch = e.changedTouches[0];\n\n  touchStartX = touch.clientX;\n  touchStartY = touch.clientY;\n}\n\nasync function handleTouchEnd(e) {\n  e.preventDefault();\n\n  const touch = e.changedTouches[0];\n  const dx = touch.clientX - touchStartX;\n  const dy = touch.clientY - touchStartY;\n\n  if (Math.abs(dx) < SWIPE_THRESHOLD && Math.abs(dy) < SWIPE_THRESHOLD) {\n    return;\n  }\n\n  let direction;\n\n  if (Math.abs(dx) > Math.abs(dy)) {\n    direction = dx > 0 ? DIRECTIONS.RIGHT : DIRECTIONS.LEFT;\n  } else {\n    direction = dy > 0 ? DIRECTIONS.DOWN : DIRECTIONS.UP;\n  }\n\n  await processMove(direction);\n}\n\nasync function processMove(direction) {\n  const moved = await game.tryMove(direction);\n\n  if (moved) {\n    updateScore();\n\n    if (game.isWin) {\n      winMessage.classList.remove('hidden');\n      removeTouchListeners();\n\n      return;\n    }\n\n    if (game.isGameOver) {\n      loseMessage.classList.remove('hidden');\n      removeTouchListeners();\n\n      return;\n    }\n  }\n\n  setupInput();\n}\n\nasync function handleKeyDown(e) {\n  const direction = {\n    ArrowUp: DIRECTIONS.UP,\n    ArrowDown: DIRECTIONS.DOWN,\n    ArrowLeft: DIRECTIONS.LEFT,\n    ArrowRight: DIRECTIONS.RIGHT,\n  }[e.key];\n\n  if (!direction) {\n    setupInput();\n\n    return;\n  }\n\n  await processMove(direction);\n}\n\nfunction setupInput() {\n  window.addEventListener('keydown', handleKeyDown, { once: true });\n}\n\nfunction updateScore() {\n  gameScore.textContent = game.score;\n}\n\nfunction startGame() {\n  button.classList.remove('button--start');\n  button.classList.add('button--restart');\n  button.textContent = 'Restart';\n  startMessage.classList.add('hidden');\n\n  game.start();\n  setupInput();\n\n  gameField.addEventListener('touchstart', handleTouchStart);\n  gameField.addEventListener('touchend', handleTouchEnd);\n}\n\nfunction restartGame() {\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startMessage.classList.remove('hidden');\n\n  button.classList.remove('button--restart');\n  button.classList.add('button--start');\n  button.textContent = 'Start';\n\n  game.restart();\n  updateScore();\n  removeTouchListeners();\n}\n\nfunction removeTouchListeners() {\n  gameField.removeEventListener('touchstart', handleTouchStart);\n  gameField.removeEventListener('touchend', handleTouchEnd);\n}\n","import { Grid } from './Grid';\n\nexport const GRID_SIZE = 4;\n\nexport class Game {\n  #grid;\n  #status;\n  #score;\n\n  static GAME_STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  static DIRECTIONS = {\n    UP: 'up',\n    DOWN: 'down',\n    LEFT: 'left',\n    RIGHT: 'right',\n  };\n\n  constructor(gridElement, initialGridState = null) {\n    this.#grid = new Grid(gridElement, initialGridState);\n    this.#status = Game.GAME_STATUS.idle;\n    this.#score = 0;\n  }\n\n  get grid() {\n    return this.#grid;\n  }\n\n  get score() {\n    return this.#score;\n  }\n\n  get status() {\n    return this.#status;\n  }\n\n  get isGameOver() {\n    return this.#status === Game.GAME_STATUS.lose;\n  }\n\n  get isWin() {\n    return this.#status === Game.GAME_STATUS.win;\n  }\n\n  start() {\n    this.#status = Game.GAME_STATUS.playing;\n    this.spawnTiles(2);\n  }\n\n  restart() {\n    this.#grid.clear();\n    this.#status = Game.GAME_STATUS.idle;\n    this.#score = 0;\n  }\n\n  async tryMove(direction) {\n    if (this.#status !== Game.GAME_STATUS.playing) {\n      return;\n    }\n\n    const { UP, DOWN, LEFT, RIGHT } = Game.DIRECTIONS;\n\n    const moveMap = {\n      [UP]: [this.canMoveUp, this.moveUp],\n      [DOWN]: [this.canMoveDown, this.moveDown],\n      [LEFT]: [this.canMoveLeft, this.moveLeft],\n      [RIGHT]: [this.canMoveRight, this.moveRight],\n    };\n\n    const [canMove, move] = moveMap[direction] || [];\n\n    if (!canMove?.call(this)) {\n      return false;\n    }\n\n    await move.call(this);\n\n    this.mergeTiles();\n\n    const [newTile] = this.spawnTiles(1);\n\n    if (\n      !this.canMoveUp()\n      && !this.canMoveDown()\n      && !this.canMoveLeft()\n      && !this.canMoveRight()\n    ) {\n      this.#status = Game.GAME_STATUS.lose;\n\n      if (newTile) {\n        await newTile.waitForTransition(true);\n      }\n    }\n\n    return true;\n  }\n\n  canMoveUp() {\n    return this.#canMove(this.#grid.cellsByColumn);\n  }\n\n  canMoveDown() {\n    return this.#canMove(\n      this.#grid.cellsByColumn.map((column) => [...column].reverse()),\n    );\n  }\n\n  canMoveLeft() {\n    return this.#canMove(this.#grid.cellsByRow);\n  }\n\n  canMoveRight() {\n    return this.#canMove(\n      this.#grid.cellsByRow.map((row) => [...row].reverse()),\n    );\n  }\n\n  moveUp() {\n    return this.#slideTiles(this.#grid.cellsByColumn);\n  }\n\n  moveDown() {\n    return this.#slideTiles(\n      this.#grid.cellsByColumn.map((column) => [...column].reverse()),\n    );\n  }\n\n  moveLeft() {\n    return this.#slideTiles(this.#grid.cellsByRow);\n  }\n\n  moveRight() {\n    return this.#slideTiles(\n      this.#grid.cellsByRow.map((row) => [...row].reverse()),\n    );\n  }\n\n  #canMove(cells) {\n    return cells.some((group) => {\n      return group.some((cell, index) => {\n        if (index === 0) {\n          return false;\n        }\n\n        if (cell.tile == null) {\n          return false;\n        }\n\n        const moveToCell = group[index - 1];\n\n        return moveToCell.canAccept(cell.tile);\n      });\n    });\n  }\n\n  #slideTiles(cells) {\n    return Promise.all(\n      cells.flatMap((group) => {\n        const promises = [];\n\n        for (let i = 1; i < group.length; i++) {\n          const cell = group[i];\n\n          if (cell.tile == null) {\n            continue;\n          }\n\n          let lastValidCell;\n\n          for (let j = i - 1; j >= 0; j--) {\n            const moveToCell = group[j];\n\n            if (!moveToCell.canAccept(cell.tile)) {\n              break;\n            }\n            lastValidCell = moveToCell;\n          }\n\n          if (lastValidCell != null) {\n            promises.push(cell.tile.waitForTransition());\n\n            if (lastValidCell.tile != null) {\n              lastValidCell.mergeTile = cell.tile;\n            } else {\n              lastValidCell.tile = cell.tile;\n            }\n            cell.tile = null;\n          }\n        }\n\n        return promises;\n      }),\n    );\n  }\n\n  mergeTiles() {\n    let scoreGained = 0;\n\n    this.#grid.cells.forEach((cell) => {\n      const mergedValue = cell.mergeTiles();\n\n      if (mergedValue) {\n        scoreGained += mergedValue;\n\n        if (mergedValue === 2048) {\n          this.#status = Game.GAME_STATUS.win;\n        }\n      }\n    });\n\n    this.#score += scoreGained;\n  }\n\n  spawnTiles(count = 1) {\n    const tiles = [];\n\n    for (let i = 0; i < count; i++) {\n      const spawnedTile = this.#grid.spawnTile();\n\n      tiles.push(spawnedTile);\n    }\n\n    return tiles;\n  }\n}\n","import { Cell } from './Cell';\nimport { GRID_SIZE } from './Game';\nimport { Tile } from './Tile';\n\nexport class Grid {\n  #cells;\n  #gridElement;\n\n  constructor(gridElement, initialGridState = null) {\n    this.#gridElement = gridElement;\n    gridElement.style.setProperty('--grid-size', GRID_SIZE);\n\n    this.#cells = this.#createCellElements(gridElement).map(\n      (cellElement, index) => {\n        return new Cell(\n          cellElement,\n          index % GRID_SIZE,\n          Math.floor(index / GRID_SIZE),\n        );\n      },\n    );\n\n    if (initialGridState) {\n      this.#populateInitialState(initialGridState);\n    }\n  }\n\n  get gridElement() {\n    return this.#gridElement;\n  }\n\n  get cells() {\n    return this.#cells;\n  }\n\n  get cellsByRow() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.y] = cellGrid[cell.y] || [];\n      cellGrid[cell.y][cell.x] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get cellsByColumn() {\n    return this.#cells.reduce((cellGrid, cell) => {\n      cellGrid[cell.x] = cellGrid[cell.x] || [];\n      cellGrid[cell.x][cell.y] = cell;\n\n      return cellGrid;\n    }, []);\n  }\n\n  get #emptyCells() {\n    return this.#cells.filter((cell) => cell.tile == null);\n  }\n\n  randomEmptyCell() {\n    const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\n\n    return this.#emptyCells[randomIndex];\n  }\n\n  spawnTile() {\n    const cell = this.randomEmptyCell();\n\n    if (!cell) {\n      return;\n    }\n\n    const tile = new Tile(this.gridElement);\n\n    cell.tile = tile;\n\n    return tile;\n  }\n\n  clear() {\n    this.#cells.forEach((cell) => {\n      if (cell.tile) {\n        cell.tile.remove();\n        cell.tile = null;\n      }\n\n      if (cell.mergeTile) {\n        cell.mergeTile.remove();\n        cell.mergeTile = null;\n      }\n    });\n  }\n\n  #createCellElements(gridElement) {\n    const cells = [];\n\n    for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\n      const cell = document.createElement('div');\n\n      cell.classList.add('game__cell');\n      cells.push(cell);\n      gridElement.append(cell);\n    }\n\n    return cells;\n  }\n\n  #populateInitialState(initialState) {\n    for (let y = 0; y < initialState.length; y++) {\n      for (let x = 0; x < initialState[y].length; x++) {\n        const value = initialState[y][x];\n\n        if (value) {\n          const cell = this.#cells.find((c) => c.x === x && c.y === y);\n          const tile = new Tile(this.#gridElement, value);\n\n          cell.tile = tile;\n        }\n      }\n    }\n  }\n}\n","export class Cell {\n  #cellElement;\n  #x;\n  #y;\n  #tile;\n  #mergeTile;\n\n  constructor(cellElement, x, y) {\n    this.#cellElement = cellElement;\n    this.#x = x;\n    this.#y = y;\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  get y() {\n    return this.#y;\n  }\n\n  get tile() {\n    return this.#tile;\n  }\n\n  set tile(value) {\n    this.#tile = value;\n\n    if (value == null) {\n      return;\n    }\n    this.#tile.x = this.#x;\n    this.#tile.y = this.#y;\n  }\n\n  get mergeTile() {\n    return this.#mergeTile;\n  }\n\n  set mergeTile(value) {\n    this.#mergeTile = value;\n\n    if (value == null) {\n      return;\n    }\n    this.#mergeTile.x = this.#x;\n    this.#mergeTile.y = this.#y;\n  }\n\n  canAccept(tile) {\n    return (\n      this.tile == null\n      || (this.mergeTile == null && this.tile.value === tile.value)\n    );\n  }\n\n  mergeTiles() {\n    if (this.tile == null || this.mergeTile == null) {\n      return;\n    }\n    this.tile.value = this.tile.value + this.mergeTile.value;\n    this.mergeTile.remove();\n    this.mergeTile = null;\n\n    return this.tile.value;\n  }\n}\n","export class Tile {\n  #tileElement;\n  #x;\n  #y;\n  #value;\n\n  constructor(tileContainer, value = Math.random() > 0.1 ? 2 : 4) {\n    this.#tileElement = document.createElement('div');\n    this.#tileElement.classList.add('game__tile');\n    tileContainer.append(this.#tileElement);\n    this.value = value;\n  }\n\n  get value() {\n    return this.#value;\n  }\n\n  set value(v) {\n    this.#value = v;\n    this.#tileElement.textContent = v;\n    this.#tileElement.className = `game__tile game__tile--${v}`;\n  }\n\n  get x() {\n    return this.#x;\n  }\n\n  set x(value) {\n    this.#x = value;\n    this.#tileElement.style.setProperty('--x', value);\n  }\n\n  get y() {\n    return this.#y;\n  }\n\n  set y(value) {\n    this.#y = value;\n    this.#tileElement.style.setProperty('--y', value);\n  }\n\n  remove() {\n    this.#tileElement.remove();\n  }\n\n  waitForTransition(animation = false) {\n    return new Promise((resolve) => {\n      this.#tileElement.addEventListener(\n        animation ? 'animationend' : 'transitionend',\n        resolve,\n        {\n          once: true,\n        },\n      );\n    });\n  }\n}\n"],"names":["$7cd56f46768996e5$export$f6f0c3fe4ec306ea","constructor","cellElement","x","y","tile","value","mergeTile","canAccept","mergeTiles","remove","$5bd8f317a28a951e$export$235cb65c20ad2b7","tileContainer","Math","random","document","createElement","classList","add","append","v","textContent","className","style","setProperty","waitForTransition","animation","Promise","resolve","addEventListener","once","$7810df3db0975edd$export$ef2184bd89960b14","gridElement","initialGridState","$852414dda2b7b132$export$bc90872e265d166e","map","index","floor","cells","cellsByRow","reduce","cellGrid","cell","cellsByColumn","filter","randomEmptyCell","randomIndex","length","spawnTile","clear","forEach","i","push","initialState","find","c","$852414dda2b7b132$export$985739bfa5723e08","GAME_STATUS","idle","playing","win","lose","DIRECTIONS","UP","DOWN","LEFT","RIGHT","grid","score","status","isGameOver","isWin","start","spawnTiles","restart","tryMove","direction","canMove","move","moveMap","canMoveUp","moveUp","canMoveDown","moveDown","canMoveLeft","moveLeft","canMoveRight","moveRight","call","newTile","column","reverse","row","some","group","moveToCell","all","flatMap","promises","lastValidCell","j","scoreGained","mergedValue","count","tiles","spawnedTile","$09e991522ca7e64e$var$gameField","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$DIRECTIONS","$09e991522ca7e64e$var$touchStartX","$09e991522ca7e64e$var$touchStartY","$09e991522ca7e64e$var$handleTouchStart","e","preventDefault","touch","changedTouches","clientX","clientY","$09e991522ca7e64e$var$handleTouchEnd","dx","dy","abs","$09e991522ca7e64e$var$processMove","$09e991522ca7e64e$var$updateScore","$09e991522ca7e64e$var$removeTouchListeners","$09e991522ca7e64e$var$setupInput","$09e991522ca7e64e$var$handleKeyDown","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","key","window","removeEventListener"],"version":3,"file":"index.c1bf8dcb.js.map"}